txt = " "
cont = 0
def incrementarContador():
    global cont
    cont +=1
    return "%d" %cont

class Nodo():
    pass

class Null(Nodo):
	def __init__(self):
		self.type = 'void'

	def imprimir(self,ident):
		print (ident + "nodo nulo")

	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id+"[label= "+"nodo_nulo"+"]"+"\n\t"

		return id

class Inicio(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,son7,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6
        self.son7 = son7

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        if type(self.son7) == type(tuple()):
            self.son7[0].imprimir(" "+ident)
        else:
            self.son7.imprimir(" "+ident)


        print (ident + "Nodo: "+self.name)
        

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        if type(self.son7) == type(tuple()):
            son7 = self.son7[0].traducir()
        else:
            son7 = self.son7.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"
        txt += id +"->"+son7+"\n\t"

        return "digraph G {\n\t"+txt+"}"

class instruccion(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion2(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion3(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion4(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion5(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion6(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion7(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class instruccion8(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
        
class dec_variables(Nodo):
    def __init__(self,son1,son2,son3,son4,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"

        return id
    
class dec_variables2(Nodo):
    def __init__(self,son1,son2,son3,son4,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"

        return id
    
class dec_variables3(Nodo):
    def __init__(self,son1,son2,son3,son4,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"

        return id
    
class dec_variables4(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
    
class dec_variables5(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
    
class dec_variables6(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
    
class dec_variables7(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
 
class dec_if(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)


        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()
            
        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
    
class dec_if2(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,son7,son8,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6
        self.son7 = son7
        self.son8 = son8

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        if type(self.son7) == type(tuple()):
            self.son7[0].imprimir(" "+ident)
        else:
            self.son7.imprimir(" "+ident)

        if type(self.son8) == type(tuple()):
            self.son8[0].imprimir(" "+ident)
        else:
            self.son8.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()
            
        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        if type(self.son7) == type(tuple()):
            son7 = self.son7[0].traducir()
        else:
            son7 = self.son7.traducir()

        if type(self.son8) == type(tuple()):
            son8 = self.son8[0].traducir()
        else:
            son8 = self.son8.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"
        txt += id +"->"+son7+"\n\t"
        txt += id +"->"+son8+"\n\t"

        return id

class dec_while(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)


        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
     
class dec_for(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,son7,son8,son9,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6
        self.son7 = son7
        self.son8 = son8
        self.son9 = son9

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        if type(self.son7) == type(tuple()):
            self.son7[0].imprimir(" "+ident)
        else:
            self.son7.imprimir(" "+ident)

        if type(self.son8) == type(tuple()):
            self.son8[0].imprimir(" "+ident)
        else:
            self.son8.imprimir(" "+ident)

        if type(self.son9) == type(tuple()):
            self.son9[0].imprimir(" "+ident)
        else:
            self.son9.imprimir(" "+ident)


        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        if type(self.son7) == type(tuple()):
            son7 = self.son7[0].traducir()
        else:
            son7 = self.son7.traducir()

        if type(self.son8) == type(tuple()):
            son8 = self.son8[0].traducir()
        else:
            son8 = self.son8.traducir()

        if type(self.son9) == type(tuple()):
            son9 = self.son9[0].traducir()
        else:
            son9 = self.son9.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"
        txt += id +"->"+son7+"\n\t"
        txt += id +"->"+son8+"\n\t"
        txt += id +"->"+son9+"\n\t"

        return id

class inicializacion_for(Nodo):
    def __init__(self,son1,son2,son3,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"

        return id

class autoincremento_for(Nodo):
    def __init__(self,son1,son2,son3,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3

    def imprimir(self, ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"

        return id
    
class autoincremento_for2(Nodo):
    def __init__(self,son1,son2,son3,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3

    def imprimir(self, ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"

        return id
    
    ##DECLARACION DO-WHILE
class dec_do_while(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,son7,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6
        self.son7 = son7

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        if type(self.son7) == type(tuple()):
            self.son7[0].imprimir(" "+ident)
        else:
            self.son7.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        if type(self.son7) == type(tuple()):
            son7 = self.son7[0].traducir()
        else:
            son7 = self.son7.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"
        txt += id +"->"+son7+"\n\t"

        return id
    
class dec_proc(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"

        return id
    
class dec_func(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,son6,son7,son8,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5
        self.son6 = son6
        self.son7 = son7
        self.son8 = son8

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        if type(self.son6) == type(tuple()):
            self.son6[0].imprimir(" "+ident)
        else:
            self.son6.imprimir(" "+ident)

        if type(self.son7) == type(tuple()):
            self.son7[0].imprimir(" "+ident)
        else:
            self.son7.imprimir(" "+ident)

        if type(self.son8) == type(tuple()):
            self.son8[0].imprimir(" "+ident)
        else:
            self.son8.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()

        if type(self.son6) == type(tuple()):
            son6 = self.son6[0].traducir()
        else:
            son6 = self.son6.traducir()

        if type(self.son7) == type(tuple()):
            son7 = self.son7[0].traducir()
        else:
            son7 = self.son7.traducir()

        if type(self.son8) == type(tuple()):
            son8 = self.son8[0].traducir()
        else:
            son8 = self.son8.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"
        txt += id +"->"+son6+"\n\t"
        txt += id +"->"+son7+"\n\t"
        txt += id +"->"+son8+"\n\t"

        return id

class recibir_proc_func(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id
    
class recibir_proc_func2(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id


class llamar_proc_func(Nodo):
    def __init__(self,son1,son2,son3,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son2 = son3

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"

        return id

        ##LEER Y ESCRIBIR
class dec_leer(Nodo):
    def __init__(self,son1,son2,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"

        return id

class dec_imprimir(Nodo):
    def __init__(self,son1,son2,son3,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()


        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"

        return id
    
class dec_imprimir2(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()


        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"

        return id
    
class operador_m(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id
    
class operador_m2(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class operador_m3(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id
    
class operador_m4(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class condicion(Nodo):
    def __init__(self,son1,son2,son3,son4,son5,name):
        self.name = name
        self.son1 = son1
        self.son2 = son2
        self.son3 = son3
        self.son4 = son4
        self.son5 = son5

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        if type(self.son2) == type(tuple()):
            self.son2[0].imprimir(" "+ident)
        else:
            self.son2.imprimir(" "+ident)

        if type(self.son3) == type(tuple()):
            self.son3[0].imprimir(" "+ident)
        else:
            self.son3.imprimir(" "+ident)

        if type(self.son4) == type(tuple()):
            self.son4[0].imprimir(" "+ident)
        else:
            self.son4.imprimir(" "+ident)

        if type(self.son5) == type(tuple()):
            self.son5[0].imprimir(" "+ident)
        else:
            self.son5.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        if type(self.son2) == type(tuple()):
            son2 = self.son2[0].traducir()
        else:
            son2 = self.son2.traducir()

        if type(self.son3) == type(tuple()):
            son3 = self.son3[0].traducir()
        else:
            son3 = self.son3.traducir()

        if type(self.son4) == type(tuple()):
            son4 = self.son4[0].traducir()
        else:
            son4 = self.son4.traducir()

        if type(self.son5) == type(tuple()):
            son5 = self.son5[0].traducir()
        else:
            son5 = self.son5.traducir()


        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"
        txt += id +"->"+son2+"\n\t"
        txt += id +"->"+son3+"\n\t"
        txt += id +"->"+son4+"\n\t"
        txt += id +"->"+son5+"\n\t"

        return id    

class expresion(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id  
    
class expresion2(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id  
    
class expresion3(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id  
    
class comparador(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id   
    
class comparador2(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador3(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador4(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador5(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador6(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador7(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class comparador8(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id 
    
class opcion_not(Nodo):
    def __init__(self,son1,name):
        self.name = name
        self.son1 = son1

    def imprimir(self,ident):
        if type(self.son1) == type(tuple()):
            self.son1[0].imprimir(" "+ident)
        else:
            self.son1.imprimir(" "+ident)

        print (ident + "Nodo: "+self.name)
        
    def traducir(self):
        global txt
        id = incrementarContador()
        if type(self.son1) == type(tuple()):
            son1 = self.son1[0].traducir()
        else:
            son1 = self.son1.traducir()

        txt += id +"[label= "+self.name+"]"+"\n\t"
        txt += id +"->"+son1+"\n\t"

        return id
    
class DEF(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"DEF: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class MAIN(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MAIN: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class APERTINICIO(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"APERTINICIO: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class APERTFIN(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"APERTFIN: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class T_STRING(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"T_STRING: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class NOMBRE(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"NOMBRE: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class ASIGNACION(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"ASIGNACION: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class TEXTO(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"TEXTO: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class T_DOUBLE(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"T_DOUBLE: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class T_PRINT(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"T_PRINT: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class NUMEROS(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"NUMEROS: "+str(self.name))
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+str(self.name)+"\"]"+"\n\t"

		return id
    
class IF(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"IF: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class ELSE(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"ELSE: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class WHILE(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"WHILE: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class FOR(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"FOR: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class DO(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"DO: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class RETURN(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"RETURN: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class COMA(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"COMA: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class MAS(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MAS: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class MENOS(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MENOS: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class MULTIPLICACION(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MULTIPLICACION: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class DIVISION(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"DIVISION: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class IGUALACION(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"IGUALACION: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class DIFERENCIA(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"DIFERENCIA: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class MML(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MML: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class MMR(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MMR: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class MMIL(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MMIL: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class MMIR(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"MMIR: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class OPCI(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"OPCI: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class OPCII(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"OPCII: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
    
class READ(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"READ: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
     
class NEGACION(Nodo):
	def __init__(self,name):
		self.name = name

	def imprimir(self,ident):
		print (ident+"NEGACION: "+self.name)
			
	def traducir(self):
		global txt
		id = incrementarContador()
		txt += id + "[label= \""+self.name+"\"]"+"\n\t"

		return id
